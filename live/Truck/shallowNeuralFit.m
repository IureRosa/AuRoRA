% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 02-Apr-2020 11:03:09
%
% This script assumes these variables are defined:
%
%   w - input data.
%   v - target data.

clearvars
close all
clc

load('v2.mat')
load('w2.mat')
load('v.mat')
load('w.mat')

x = w2;
t = v2;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'traingdx';  % Scaled conjugate gradient backpropagation.

% Create a Fitting Network
hiddenLayerSize = [15];
net = fitnet(hiddenLayerSize,trainFcn);

net.trainParam.epochs = 10000;
net.trainParam.max_fail = 999999;
net.trainParam.time = 15;
net.trainParam.min_grad = 1e-12;
% net.trainParam.lr = 1e-2;
% net.trainParam.lr = k*0.01;
% k*(10^(-randi(k,1)));
net.trainParam.mc = 0.98;
% net.trainParam.lr = 8e-6;


% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 60/100;
net.divideParam.valRatio = 20/100;
net.divideParam.testRatio = 20/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Root Mean Squared Error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotregression', 'plotfit'};

% Train the Network
net = configure(net,x,t);
net = init(net);
k = randi(9)
net.IW{1} = ones(size(net.IW{1},1),1).*k;
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y);

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};

% View the Network
% view(net)

% Plot fit:
figure, FIT = plotfit(net,x,t);

totalPerformance = perform(net,t,net(x));
erro = sqrt(totalPerformance)

%%
x = linspace(.1,2*pi/3,500);

figure
plot(x,yfit,'LineWidth',1.5)
hold on
plot(w,v,'ro','MarkerSize',2,'LineWidth',3)
plot(linspace(.1,1,15),ones(1,15).*0.75,'r.:','LineWidth',2)
plot(ones(1,15).*.1,linspace(.075,.75,15),'r.:','LineWidth',2)
plot(w2,v2,'r.:','LineWidth',2)
xlim([0,1.2])
ylim([0,1])
hold off
title('Velocidade com Carreta')
xlabel('Angular [rad/s]')
ylabel('Linear [m/s]')
grid on
